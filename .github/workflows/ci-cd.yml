name: Bringee CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# Add explicit permissions for Workload Identity Federation
permissions:
  contents: read
  id-token: write
  pull-requests: read

env:
  GCP_REGION: us-central1
  GAR_LOCATION: us-central1
  REPOSITORY: bringee-artifacts

jobs:
  # Security and dependency scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Test and build backend services
  test-and-build-backend:
    runs-on: ubuntu-latest
    needs: security-scan
    
    strategy:
      matrix:
        service: [user-service, shipment-service]
        include:
          - service: user-service
            port: 8080
          - service: shipment-service
            port: 8081

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true

    - name: Install dependencies
      run: |
        cd backend/services/${{ matrix.service }}
        go mod download
        go mod verify

    - name: Run tests
      run: |
        cd backend/services/${{ matrix.service }}
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out

    - name: Build binary
      run: |
        cd backend/services/${{ matrix.service }}
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server .

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.service }}
        path: backend/services/${{ matrix.service }}/coverage.out

  # Build and push Docker images
  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: [security-scan, test-and-build-backend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service: [user-service, shipment-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
        service_account: '${{ secrets.GITHUB_ACTIONS_SA_EMAIL }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: 'Docker configuration'
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      env:
        PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        IMAGE_TAG: ${{ github.sha }}
        BRANCH_NAME: ${{ github.ref_name }}
      run: |
        # Build with cache and push
        docker buildx build \
          --platform linux/amd64 \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --tag ${{ env.GAR_LOCATION }}-docker.pkg.dev/$PROJECT_ID/${{ env.REPOSITORY }}/${{ matrix.service }}:$IMAGE_TAG \
          --tag ${{ env.GAR_LOCATION }}-docker.pkg.dev/$PROJECT_ID/${{ env.REPOSITORY }}/${{ matrix.service }}:latest \
          --tag ${{ env.GAR_LOCATION }}-docker.pkg.dev/$PROJECT_ID/${{ env.REPOSITORY }}/${{ matrix.service }}:$BRANCH_NAME \
          --file backend/services/${{ matrix.service }}/Dockerfile \
          --push \
          backend/services/${{ matrix.service }}

    - name: Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Deploy to Cloud Run
  deploy-to-cloud-run:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: ${{ github.event.inputs.environment || 'staging' }}

    strategy:
      matrix:
        service: [user-service, shipment-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
        service_account: '${{ secrets.GITHUB_ACTIONS_SA_EMAIL }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Deploy to Cloud Run
      env:
        PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        REGION: ${{ env.GCP_REGION }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Deploy with traffic splitting for zero-downtime deployments
        gcloud run deploy ${{ matrix.service }} \
          --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/$PROJECT_ID/${{ env.REPOSITORY }}/${{ matrix.service }}:$IMAGE_TAG \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 0 \
          --concurrency 80 \
          --timeout 300 \
          --set-env-vars ENVIRONMENT=${{ github.event.inputs.environment || 'staging' }},VERSION=${{ github.sha }} \
          --update-env-vars ENVIRONMENT=${{ github.event.inputs.environment || 'staging' }},VERSION=${{ github.sha }}

    - name: Wait for deployment
      run: |
        gcloud run services describe ${{ matrix.service }} \
          --region ${{ env.GCP_REGION }} \
          --format="value(status.conditions[0].status)"

    - name: Get service URL
      id: service-url
      run: |
        URL=$(gcloud run services describe ${{ matrix.service }} \
          --region ${{ env.GCP_REGION }} \
          --format="value(status.url)")
        echo "url=$URL" >> $GITHUB_OUTPUT

    - name: Health check
      run: |
        sleep 30
        curl -f "${{ steps.service-url.outputs.url }}/health" || exit 1

    - name: Comment deployment info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **${{ matrix.service }} deployed successfully!**
          
          **Environment:** ${{ github.event.inputs.environment || 'staging' }}
          **Service URL:** ${{ steps.service-url.outputs.url }}
          **Commit:** ${{ github.sha }}
          **Deployed by:** @${{ github.actor }}`
          })

  # Frontend deployment (if Flutter app exists)
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [security-scan, deploy-to-cloud-run]
    if: github.ref == 'refs/heads/main' && hashFiles('flutter/**') != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Build Flutter web app
      run: flutter build web --release

    - name: Deploy to Firebase Hosting
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'
        channelId: live

  # Notifications
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-to-cloud-run, deploy-frontend]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Deployment notification
      uses: actions/github-script@v7
      with:
        script: |
          const { data: deployments } = await github.rest.repos.listDeployments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            per_page: 1
          });
          
          if (deployments.length > 0) {
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployments[0].id,
              state: '${{ needs.deploy-to-cloud-run.result == 'success' && needs.deploy-frontend.result == 'success' ? 'success' : 'failure' }}',
              environment_url: '${{ needs.deploy-to-cloud-run.outputs.service-url }}'
            });
          }