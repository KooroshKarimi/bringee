permissions:
  contents: 'read'
  id-token: 'write'

name: Bringee CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: europe-west3
  GAR_LOCATION: europe-west3
  REPOSITORY: bringee-artifacts

jobs:
  test-and-build-backend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [user-service, shipment-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Test
      run: |
        cd backend/services/${{ matrix.service }}
        go test -v ./...

    - name: Build
      run: |
        cd backend/services/${{ matrix.service }}
        go build -v -o server

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: test-and-push-docker
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service: [user-service, shipment-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      run: |
        docker --version
        docker info

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: 'Docker configuration'
      run: gcloud auth configure-docker europe-west3-docker.pkg.dev

    - name: Build Docker image with commit SHA
      run: docker build --platform linux/amd64 --tag europe-west3-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }} --file backend/services/${{ matrix.service }}/Dockerfile backend/services/${{ matrix.service }}

    - name: Push Docker image with commit SHA
      run: docker push europe-west3-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }}

    - name: Build Docker image with latest tag
      run: docker build --platform linux/amd64 --tag europe-west3-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:latest --file backend/services/${{ matrix.service }}/Dockerfile backend/services/${{ matrix.service }}

    - name: Push Docker image with latest tag
      run: docker push europe-west3-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:latest

  deploy-to-cloud-run:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service: [user-service, shipment-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ matrix.service }} \
          --image europe-west3-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:latest \
          --region ${{ env.GCP_REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10

  deploy-terraform:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5"

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -var="gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" -var="github_repository=${{ github.repository }}"

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve -var="gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" -var="github_repository=${{ github.repository }}"

  deploy-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        channel: 'stable'

    - name: Get dependencies
      working-directory: ./flutter
      run: flutter pub get

    - name: Build Flutter web app
      working-directory: ./flutter
      run: flutter build web --release

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Deploy to Firebase Hosting (if configured)
      run: |
        if [ -f "flutter/firebase.json" ]; then
          cd flutter
          firebase deploy --only hosting --project ${{ secrets.GCP_PROJECT_ID }}
        else
          echo "Firebase configuration not found, skipping frontend deployment"
        fi
